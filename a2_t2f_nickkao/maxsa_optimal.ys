.pos 0x100
main:
    irmovq $arraySize, %rsi
    irmovq $stackEnd, %rsp
    irmovq $array, %rdi
    irmovq $resultStart, %rdx
    mrmovq (%rsi), %rsi
    irmovq $resultEnd, %rcx
    call   maxSubArray
    irmovq $resultSum, %r8
    rmmovq %rax, (%r8)
    halt

.pos 0x1000
maxSubArray:
    
    irmovq $2, %r9
    pushq  %r13
    subq   %rsi, %r9     # r9 = r9 - arraysize
    jl     L1
    je     L11           #basecase for size 2

    #base case size == 1
    rmmovq %rdi, (%rcx) # rcx = array
    rmmovq %rdi, (%rdx) # rdx = array
    mrmovq (%rdi), %r13 # value into r13
    jmp    L9           #goto l9 for the return 
L1:

    pushq  %rbx

    irmovq $2, %r10
    irmovq $8, %r8
    rrmovq %rsi, %rbx

    pushq  %rbp

    rrmovq %rsi, %r9
    irmovq $8, %rbp
    divq   %r10, %rbx
    
    pushq  %r12

    mulq   %rbx, %rbp
    mulq   %r8, %r9
    addq   %rdi, %rbp

    pushq  %r14
    
    addq   %rdi, %r9
    subq   %r8, %r9

    
    irmovq $0x8000000000000000, %r10
    rrmovq %rbp, %r11
    irmovq $0x8000000000000000, %r13
    
    
    pushq  %r9          #save the end so can use after loop 
    rrmovq %rbp, %r14
    xorq   %r9, %r9
    subq   %r8, %r11
    xorq   %rax, %rax
    

L2:
    mrmovq (%r14), %r12
    addq   %r12, %rax
    rrmovq %rax, %r12
    subq   %r13, %r12

    jle    L3

    rrmovq %rax, %r13
    rmmovq %r14, (%rcx)
    

L3: 
    mrmovq (%r11), %r12
    addq   %r12, %r9
    rrmovq %r9, %r12
    subq   %r10, %r12

    jle    L4

    rrmovq %r9, %r10
    rmmovq %r11, (%rdx)
L4:

    addq   %r8, %r14
    subq   %r8, %r11

    rrmovq %r11, %r12
    subq   %rdi, %r12
    jge    L2
    
#end of loop
#need to check if one more loop for the right hand side is neccessary use r9 as array + end -1
#
L5:
    popq   %r9
    rrmovq %r14, %r12               # r12 = r11 (r12 ptr value)
    subq   %r9, %r12                # r12  = r12 - r9 (check if less than end)
    jg     L7

    mrmovq (%r14), %r12
    addq   %r12, %rax
    rrmovq %rax, %r12
    subq   %r13, %r12
    jle    L7
    
    rrmovq %rax, %r13
    rmmovq %r14, (%rcx)

L7:
    rrmovq %rsi, %r9
    
    subq   %rbx, %r9
    rrmovq %rdx, %r12
    pushq  %rdx
    addq   %r10, %r13
    rrmovq %rbx, %rsi
    rrmovq %rsp, %rdx
    pushq  %rcx
    rrmovq %rcx, %r14
    rrmovq %r9, %rbx
    rrmovq %rsp, %rcx


    call   maxSubArray

    popq   %rcx
    rrmovq %rax, %r9
    popq   %rdx
    subq   %r13, %r9
    jle    L8
    rrmovq %rax, %r13
    rmmovq %rdx, (%r12)
    rmmovq %rcx, (%r14)
    
L8:
    pushq  %rdx
    rrmovq %rbp, %rdi
    rrmovq %rbx, %rsi
    rrmovq %rsp, %rdx
    pushq  %rcx
    rrmovq %rsp, %rcx
    call   maxSubArray
    popq   %rcx
    popq   %rdx
    rrmovq %rax, %r9

    
    popq   %r14
    subq   %r13, %r9
    popq   %r12
    popq   %rbp
    popq   %rbx
    
    jle    L9
    rrmovq %rax, %r13
    rmmovq %rdx, (%r12)
    rmmovq %rcx, (%r14)
L9:
    rrmovq %r13, %rax
    popq   %r13
    ret

#case where size of array is 2 
#if both are positive then return the sum 
#if not then you return the max

L10:

    mrmovq (%rdi),%r10  # r10 = value at array 
    andq   %r10, %r10   # r10 = r10 
    jl     L11          # goto L11 if negative

    rmmovq %rdi, (%rdx) # start = array
    rmmovq %rdi, (%rcx) # end = array
    mrmovq (%rdi), %r13 # value into r13

    irmovq 8, %r8 
    addq   %rdi, %r8    # r8 = pointer to second value 
    mrmovq (%r8),%r9    # r9 = second value 
    andq   %r9, %r9     # r9 = r9 check it's value
    jl     L9           # goto L9 if r9 is negative 
    rmmovq %r8, (%rcx)  # end = pointer to second value 
    addq   %r9, %r13    # r13 = r13 + r9 aka total of both
    jmp L9

#first value is negative 
#more complex case
#first check if y is pos
L11:
    irmovq 8, %r8 
    addq   %rdi, %r8    # r8 = pointer to second value 
    mrmovq (%r8),%r9    # r9 = second value 
    andq   %r9, %r9     # r9 = r9 check it's value
    jl     L12          # case where both values are negative

    rmmovq %r8, (%rdx)  # start = array
    rmmovq %r8, (%rcx)  # end = array
    mrmovq (%r8), %r13  # value into r13
    jmp    L9


# r9 holds second value 
# r8 holds pointer to second value 

# r10 holds first value
# rdi holds pointer to first value 

# lol idk how to fuck with negative numbers
L12: 
    irmovq $0xFFFFFFFFFFFFFFFF, %r11    #r11 = all 1's to xor
    xorq   %r10, %r11                    # 
    irmovq 1, %r13                      # r13 = 1
    addq   %r13, %r11                   # r11 = positiive value of r10 
    addq   %r9,  %r11                   # r11 = r11 + r9
    #if result is positive it means that r10 has a larger negative number 
    #thus r9 is the correct subarray value 
    jl     L13              #goto L13 when r10 is larger than r9 

    rmmovq %rdi, (%rdx) # start = array
    rmmovq %rdi, (%rcx) # end = array
    mrmovq (%rdi), %r13 # value into r13
    jmp L9
L13: 
    rmmovq %r8, (%rdx) 
    rmmovq %r8, (%rcx) 
    mrmovq (%r8), %r13 
    jmp L9
    

.pos 0x2000
array:
    .quad 13
    .quad -3
    .quad -25
    .quad -20
    .quad -3
    .quad -16
    .quad -23
    .quad 18
    .quad 20
    .quad -7
    .quad 12
    .quad -5
    .quad -22
    .quad 15
    .quad -4
    .quad 7
arraySize:
    .quad 16

.pos 0x2500
resultStart:
    .quad 0
resultEnd:
    .quad 0
resultSum:
    .quad 0

.pos 0x2600
reference:
     .quad 0x2038
     .quad 0x2050
     .quad 43


.pos 0x4000
stack:
    .quad 0, 1000
stackEnd:
    .quad 0

#branch prediction takes back path (aka assumes you don't jump)